---
description: 
globs: 
alwaysApply: true
---
# VibeCreAI Website - Project Structure & Development Guide

## 🏗️ Project Overview
**VibeCreAI** is a 3D interactive website showcasing AI-powered creative innovation. Built with vanilla JavaScript, Three.js, and AI-assisted "vibe coding" methodology.

**Live Site:** [vibecreai.com](mdc:https:/vibecreai.com)

---

## 📁 Complete Directory Structure

```
VibeCreAI-Website/
├── 📄 index.html                    # Main entry point (5141 lines) - Complete 3D website
├── 📄 package.json                  # Dependencies (Playwright for testing)
├── 📄 package-lock.json             # Lock file
├── 📄 vercel.json                   # Deployment config + redirects
├── 📄 README.md                     # Project documentation
├── 📄 app-ads.txt                   # Google AdSense verification
├── 📄 CNAME                         # Custom domain configuration
├── 📄 .gitignore                    # Git ignore patterns
│
├── 📁 Assets/                       # All media and static assets
│   ├── 📁 3D/                       # 3D Models & Assets
│   │   ├── 🎭 robot.glb            # Dancing robot 3D model (3.0MB)
│   │   └── 🎭 dance.glb            # Dance animation 3D model (3.2MB)
│   │
│   ├── 📁 Audio/                    # Sound Assets
│   │   ├── 🎵 audio.mp3            # Background ambient music (4.4MB)
│   │   └── 🔊 transition.wav       # UI transition sound effects (375KB)
│   │
│   ├── 📁 Font/                     # Typography & 3D Text Models
│   │   ├── 🔤 Born2bSportyFS.otf   # Custom font file (95KB)
│   │   ├── 🎯 V.obj                # 3D letter "V" model
│   │   ├── 🎯 I.obj                # 3D letter "I" model
│   │   ├── 🎯 B.obj                # 3D letter "B" model
│   │   ├── 🎯 E.obj                # 3D letter "E" model
│   │   ├── 🎯 C.obj                # 3D letter "C" model
│   │   ├── 🎯 R.obj                # 3D letter "R" model
│   │   └── 🎯 AI.obj               # 3D "AI" text model
│   │
│   └── 📁 Image/                    # Graphics & Icons
│       ├── 🖼️ favicon.png          # Site favicon (1.5KB)
│       ├── 🖼️ logo.png             # Brand logo (20KB)
│       ├── 🖼️ og_image.png         # Open Graph social media image (43KB)
│       ├── 🖼️ menu.png             # Navigation menu icon (183KB)
│       └── 🖼️ spin2pick_icon.png   # App icon for Spin2Pick (178KB)
│
├── 📁 .cursor/                      # Cursor IDE Configuration
│   └── 📁 rules/                    # Cursor Rules
│       ├── 📄 cursor-rules.mdc     # Rule management guidelines
│       └── 📄 project-structure.mdc # This file
│
├── 📁 .git/                        # Git version control
├── 📁 node_modules/                # NPM dependencies
└── 📁 test-results/                # Playwright test results
```

---

## 🎯 Core Architecture & Technologies

### **Main Application Structure**
- **Single Page Application (SPA)** - Everything in `index.html`
- **Three.js 3D Engine** - Immersive 3D environment
- **Vanilla JavaScript** - No frameworks, pure web APIs
- **Web Audio API** - Background music and sound effects
- **Responsive Design** - Mobile-first approach with smart breakpoints

### **Key Technology Stack**
```javascript
// Core Dependencies
- Three.js (3D graphics engine)
- lil-gui (Real-time camera controls)
- Google Fonts (Orbitron typography)
- Web Audio API (Sound system)
- Playwright (E2E testing)
```

---

## 🚀 Development Guidelines

### **File Organization Rules**
1. **Assets Structure**: Keep all media files organized by type in `Assets/`
2. **3D Models**: Use `.glb` format for 3D models, `.obj` for text meshes
3. **Audio**: Use `.mp3` for music, `.wav` for UI sound effects
4. **Images**: Optimize all images, use descriptive filenames

### **Code Architecture (index.html)**
```javascript
// Main sections in index.html:
├── HTML Structure & SEO Meta Tags (lines 1-200)
├── CSS Styling & Responsive Design (lines 201-1500)
├── Three.js 3D Scene Setup (lines 1501-3000)
├── Audio System Implementation (lines 3001-3500)
├── Navigation & UI Controls (lines 3501-4500)
└── Animation & Interaction Logic (lines 4501-5141)
```

### **Key Features Implementation**
- **3D Scene Management**: Camera positioning, lighting, model loading
- **Audio Controller**: Background music, transition sounds, volume control
- **Navigation System**: Card-based navigation with keyboard/mouse support
- **Responsive Layout**: Mobile-optimized with smart breakpoints
- **Performance Optimization**: Efficient rendering and asset loading

---

## 🎨 Design System

### **Typography**
- **Primary Font**: Orbitron (Google Fonts)
- **Usage**: Applied consistently across all UI elements
- **Weights**: 400, 500, 600, 700, 800, 900

### **Color Palette**
```css
/* Primary Colors */
--background: #0a0a0a      /* Deep black background */
--primary-blue: #2cb4dd     /* VibeCreAI brand blue */
--accent-green: #1abc9c     /* Success/accent color */
--text-white: #ffffff       /* Primary text */

/* Interactive States */
--hover-dark: rgba(0,0,0,0.8)    /* Darker hover states */
--modal-backdrop: rgba(0,0,0,0.8) /* Modal backgrounds */
```

### **Responsive Breakpoints**
```css
/* Mobile-first responsive design */
@media (max-width: 320px)  /* Extreme narrow - hamburger menu */
@media (max-width: 768px)  /* Mobile devices */
@media (max-width: 1024px) /* Tablets */
@media (min-width: 1025px) /* Desktop */
```

---

## 🔧 Development Workflow

### **File Editing Priorities**
1. **Primary Development**: `index.html` (contains entire application)
2. **Asset Management**: Add new files to appropriate `Assets/` subdirectories
3. **Configuration**: `vercel.json` for deployment, `package.json` for dependencies
4. **Documentation**: Update `README.md` for major changes

### **Code Style Guidelines**
- **HTML**: Semantic structure with accessibility considerations
- **CSS**: Mobile-first responsive design with CSS Grid/Flexbox
- **JavaScript**: Modern ES6+ syntax, functional programming approach
- **Comments**: Extensive documentation for complex 3D math and animations

### **Performance Considerations**
- **3D Models**: Optimize `.glb` files for web delivery (< 5MB each)
- **Audio Files**: Compress audio while maintaining quality
- **Images**: Use appropriate formats (PNG for icons, JPEG for photos)
- **Code Splitting**: Organize JavaScript into logical sections within `index.html`

---

## 🎯 Key Features & Functionalities

### **3D Interactive Elements**
- **Dancing Robot**: Animated 3D character with dance sequences
- **3D Text Models**: Individual letter models forming "VIBECREAI"
- **Camera Controls**: Smooth transitions between different views
- **Lighting System**: Dynamic lighting for immersive experience

### **Audio System**
- **Background Music**: Looping ambient track (`audio.mp3`)
- **UI Sound Effects**: Transition sounds (`transition.wav`)
- **Smart Controls**: Autoplay with graceful fallback
- **Volume Management**: User-controllable audio settings

### **Navigation & UX**
- **Card-based Navigation**: Apps/About sections with arrow controls
- **Keyboard Support**: Arrow keys for navigation
- **Mobile Optimization**: Touch-friendly interactions
- **Loading States**: Progress indicators and smooth transitions

---

## 📱 Mobile & Accessibility

### **Responsive Features**
- **Smart Navigation**: Horizontal menu with hamburger only for extreme narrow screens
- **Touch Interactions**: Optimized for mobile gestures
- **Text Scaling**: High-resolution text rendering for mobile devices
- **Performance**: Optimized 3D rendering for mobile GPUs

### **Accessibility Standards**
- **Screen Reader Support**: Hidden content for assistive technologies
- **Keyboard Navigation**: Full keyboard accessibility
- **Color Contrast**: WCAG compliant color combinations
- **Focus Management**: Proper focus indicators and tab order

---

## 🚀 Deployment & Configuration

### **Vercel Deployment**
- **Domain**: Custom domain via `CNAME` file
- **Redirects**: App routing configured in `vercel.json`
- **Performance**: Optimized for global CDN delivery

### **SEO Optimization**
- **Meta Tags**: Complete Open Graph and Twitter Card implementation
- **Structured Data**: Rich snippets for search engines
- **Performance**: Optimized loading and rendering
- **Social Media**: Custom preview images and descriptions

---

## 🤖 AI-Assisted Development

### **"Vibe Coding" Methodology**
This project demonstrates human-AI collaboration using:
- **Cursor IDE** with AI code completion
- **Claude 4 Sonnet** for complex problem solving
- **Iterative Development** with AI assistance for optimization

### **AI Integration Points**
- **Code Generation**: Complex 3D mathematics and animations
- **Asset Optimization**: AI-assisted image and audio processing
- **UX Enhancement**: AI-driven user experience improvements
- **Performance Tuning**: AI-assisted optimization strategies

---

## 📊 Testing & Quality Assurance

### **Testing Setup**
- **Playwright**: E2E testing framework configured
- **Test Results**: Stored in `test-results/` directory
- **Cross-browser**: Testing across major browsers
- **Mobile Testing**: Device emulation and real device testing

### **Quality Standards**
- **Code Quality**: Consistent formatting and documentation
- **Performance**: Regular performance auditing and optimization
- **Accessibility**: WCAG 2.1 compliance testing
- **User Experience**: Continuous UX testing and improvement

---

## 🎯 Future Development Guidelines

### **Adding New Features**
1. **Plan Structure**: Design feature architecture before implementation
2. **Asset Integration**: Add required assets to appropriate `Assets/` directories
3. **Code Organization**: Maintain logical sections within `index.html`
4. **Testing**: Implement tests for new functionality
5. **Documentation**: Update this guide and README.md

### **Optimization Priorities**
1. **Performance**: 3D rendering and asset loading optimization
2. **Accessibility**: Continuous accessibility improvements
3. **Mobile Experience**: Enhanced mobile interactions
4. **SEO**: Ongoing search engine optimization
5. **User Experience**: Data-driven UX enhancements

---

*This project showcases the future of AI-assisted web development through innovative human-AI collaboration. 🚀*

